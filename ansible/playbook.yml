---
- hosts: all
  name: Install Badgr Server
  become: true
  vars_files:
    - ./vars/tf_ansible_vars_file.yml
    - ./vars/badgr_vars.yml

  tasks:
    - name: Install aptitude
      ansible.builtin.apt:
        name: aptitude
        update_cache: true

    - name: Install required system packages
      ansible.builtin.apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        update_cache: true

    - name: Add Deadsnakes PPA
      ansible.builtin.apt_repository:
        repo: ppa:deadsnakes/ppa
        state: present

    - name: Install python3.8
      ansible.builtin.apt:
        pkg:
          - python3.8
          - python3-pip

    - name: Add Docker GPG apt Key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      ansible.builtin.apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Update apt and install docker-ce
      ansible.builtin.apt:
        name: docker-ce
        update_cache: true

    - name: Add remote "ubuntu" user to "docker" group
      ansible.builtin.user:
        name: "ubuntu"
        group: "docker"
        append: true

    - name: Install docker python package
      ansible.builtin.pip:
        name:
          - docker
          - docker-compose

    - name: Install docker-compose
      ansible.builtin.get_url:
        url: https://github.com/docker/compose/releases/download/v2.11.0/docker-compose-linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: "u+x,g+x"

    - name: Clone badgr server
      ansible.builtin.git:
        repo: https://github.com/reedu-reengineering-education/badgr-server.git
        dest: /home/ubuntu/badgr-server

    - name: Creating .env file
      ansible.builtin.copy:
        dest: /home/ubuntu/badgr-server/.env
        mode: "777"
        content: |
          TIME_ZONE={{badgr_time_zone}}
          LANGUAGE_CODE={{badgr_language_code}}
          DB_NAME={{tf_db_name}}
          DB_USER={{tf_db_username}}
          DB_PASSWORD={{tf_db_password}}
          DB_HOST={{tf_db_endpoint}}
          DB_PORT={{tf_db_port}}
          CACHE_LOCATION={{tf_memcached_endpoint}}:11211
          AWS_ACCESS_KEY_ID={{tf_access_key}}
          AWS_ACCESS_KEY_SECRET={{tf_secret_key}}
          AWS_REGION_NAME={{tf_aws_region}}
          AWS_REGION={{tf_aws_region}}
          DEFAULT_FROM_EMAIL={{badgr_from_email}}
          SERVER_EMAIL={{badgr_from_email}}
          AWS_STORAGE_BUCKET_NAME=badgr-s3
          AWS_S3_CUSTOM_DOMAIN={{tf_s3_endpoint}}
          HTTP_ORIGIN=http://{{inventory_hostname}}
          BADGR_APPROVED_ISSUERS_ONLY={{badgr_approved_issuers_only}}
          GDPR_COMPLIANCE_NOTIFY_ON_FIRST_AWARD={{badgr_gdpr_compliance_notify_on_first_award}}
          SECRET_KEY={{badgr_secret_key}}
          UNSUBSCRIBE_KEY={{badgr_unsubscribe_key}}

    - name: Deploy Docker Compose stack
      community.docker.docker_compose:
        project_src: /home/ubuntu/badgr-server
        files:
          - docker-compose.standalone.yml

    - name: Run migration script
      changed_when: false
      ansible.builtin.command:
        docker-compose -f /home/ubuntu/badgr-server/docker-compose.standalone.yml \
        exec api python /badgr_server/manage.py migrate

    - name: Generate docs swagger file(s)
      changed_when: false
      ansible.builtin.command:
        docker-compose -f /home/ubuntu/badgr-server/docker-compose.standalone.yml  \
        exec api python /badgr_server/manage.py dist

    - name: Collectstatic
      changed_when: false
      ansible.builtin.command:
        docker-compose -f /home/ubuntu/badgr-server/docker-compose.standalone.yml \
        exec api python /badgr_server/manage.py collectstatic --noinput

    # - name: Create superuser
    #   changed_when: false
    #   ansible.builtin.command:
    #     docker-compose -f /home/ubuntu/badgr-server/docker-compose.standalone.yml \
    #     exec api python /badgr_server/manage.py createsuperuser --noinput --username user --email user@email.com
